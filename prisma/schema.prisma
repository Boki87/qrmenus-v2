// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  store    Store[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id           String  @id @default(cuid())
  name         String
  image        String?
  email        String?
  phone        String?
  description  String?
  annoucement  String?
  workingHours String?
  address      String?
  currency     String?
  ownerId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  foodCategory FoodCategory[]
  foods        Food[]
  storeVisits  StoreVisits[]
}

model FoodCategory {
  id         String @id @default(cuid())
  name       String
  storeId    String
  orderIndex Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store          Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryVisits CategoryVisits[]
  Food           Food[]
}

model Food {
  id             String  @id @default(cuid())
  name           String
  image          String?
  description    String?
  comments       String?
  price          Int?
  size           Int?
  sizeUnit       String?
  prepTime       Int?
  isLive         Boolean @default(true)
  isFeatured     Boolean @default(false)
  storeId        String
  foodCategoryId String
  orderIndex     Int     @default(0)

  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @updatedAt
  store        Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  foodCategory FoodCategory @relation(fields: [foodCategoryId], references: [id], onDelete: Cascade)
  foodVisits   FoodVisits[]
}

model FoodVisits {
  id        String   @id @default(cuid())
  foodId    String
  createdAt DateTime @default(now())
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
}

model StoreVisits {
  id        String   @id @default(cuid())
  storeId   String
  createdAt DateTime @default(now())
  food      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model CategoryVisits {
  id         String       @id @default(cuid())
  categoryId String
  createdAt  DateTime     @default(now())
  food       FoodCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}
